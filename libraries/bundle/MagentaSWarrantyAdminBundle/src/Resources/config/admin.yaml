parameters:
    sonata.media.admin.media.class: Magenta\Bundle\SWarrantyAdminBundle\Admin\Media\MediaAdmin
#    sonata.media.admin.gallery.class: Application\Sonata\MediaBundle\Admin\AppGalleryAdmin

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: false      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    Magenta\Bundle\SWarrantyAdminBundle\:
        resource: '../../*'
        exclude: '../../{Security/Handler,Entity,Migrations,Tests,Kernel.php}'
    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    Magenta\Bundle\SWarrantyAdminBundle\Controller\:
        resource: '../../Controller'
        tags: ['controller.service_arguments']

    magenta_admin_logout_handler:
        class: Magenta\Bundle\SWarrantyAdminBundle\Security\Handler\LogoutHandler
    magenta_admin_login_success_handler:
        class: Magenta\Bundle\SWarrantyAdminBundle\Security\Handler\LoginSuccessHandler
        arguments:
            - '@service_container'

    magenta_swarranty.admin.security.handler.role:
        class: '%sonata.admin.security.handler.role.class%'
        public: false
        arguments:
            - '@security.authorization_checker'
            - [ '%sonata.admin.configuration.security.role_super_admin%' ]
            - '@service_container'

    magenta_swarranty.user.editable_role_builder:
        class: Magenta\Bundle\SWarrantyAdminBundle\Security\EditableRolesBuilder
        arguments:
            - '@security.token_storage'
            - '@security.authorization_checker'
            - '@sonata.admin.pool'
            - '%security.role_hierarchy.roles%'

    magenta_swarranty.user.form.type.security_roles:
        class: Magenta\Bundle\SWarrantyAdminBundle\Form\Type\SecurityRolesType
        tags:
            - {name: "form.type", alias: "sonata_security_roles"}
        arguments:
            - '@magenta_swarranty.user.editable_role_builder'

    magenta_swarranty.twig.extension:
        class: Magenta\Bundle\SWarrantyAdminBundle\Twig\MagentaTwigExtension
        tags: ['twig.extension']
        arguments:
            - '@service_container'
    Magenta\Bundle\SWarrantyAdminBundle\Twig\MagentaTwigExtension:
        alias: magenta_swarranty.twig.extension

#<service id="sonata.admin.security.handler.role" class="%sonata.admin.security.handler.role.class%" public="false">
#            <argument type="service" id="security.authorization_checker"/>
#            <argument type="collection">
#                <argument>%sonata.admin.configuration.security.role_super_admin%</argument>
#            </argument>
#        </service>

#     <service id="sonata.user.editable_role_builder" class="Sonata\UserBundle\Security\EditableRolesBuilder">
#            <argument type="service" id="security.token_storage" />
#            <argument type="service" id="security.authorization_checker" />
#            <argument type="service" id="sonata.admin.pool" />
#            <argument>%security.role_hierarchy.roles%</argument>
#        </service>
#
#        <service id="sonata.user.form.type.security_roles" class="Sonata\UserBundle\Form\Type\SecurityRolesType">
#            <tag name="form.type" alias="sonata_security_roles" />
#
#            <argument type="service" id="sonata.user.editable_role_builder" />
#        </service>